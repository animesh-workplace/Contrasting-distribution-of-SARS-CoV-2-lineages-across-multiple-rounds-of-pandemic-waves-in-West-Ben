temp = config["path"].split('/')
file_name = temp[-1]
del temp[-1]
base_path = '/'.join(temp) or '.'

rule all:
    input: f"{base_path}/alignment/{file_name}_aligned.fasta"

checkpoint partition_sequences:
    input:
        sequences = f"{base_path}/{file_name}.fasta"
    output:
        split_sequences = directory(f"{base_path}/alignment/split_sequences/pre/")
    params:
        sequences_per_group = 150
    shell:
        """
        python workflow/scripts/partition-sequences.py \
            --sequences {input.sequences} \
            --sequences-per-group {params.sequences_per_group} \
            --output-dir {output.split_sequences}
        """

rule partitions_intermediate:
    message:
        """
        partitions_intermediate: Copying sequence fastas
        {wildcards.cluster}
        """
    input:
        "{base_path}/alignment/split_sequences/pre/{cluster}.fasta"
    output:
        "{base_path}/alignment/split_sequences/post/{cluster}.fasta"
    shell:
        "cp {input} {output}"

rule align:
    message:
        """
        Aligning sequences to {input.reference}
          - gaps relative to reference are considered real
        Cluster:  {wildcards.cluster}
        """
    input:
        sequences = rules.partitions_intermediate.output,
        reference = 'workflow/resources/data/reference.fasta'
    output:
        alignment = "{base_path}/alignment/split_alignments/{cluster}.fasta"
    threads: 2
    run:
        shell(
            """
            augur align \
                --sequences {input.sequences} \
                --reference-sequence {input.reference} \
                --output {output.alignment} \
                --nthreads {threads} \
                --remove-reference \
            """
        )

def _get_alignments(wildcards):
    checkpoint_output = checkpoints.partition_sequences.get(**wildcards).output[0]
    return expand("{base_path}/alignment/split_alignments/{i}.fasta",
                  base_path=base_path,
                  i=glob_wildcards(os.path.join(checkpoint_output, "{i}.fasta")).i)

rule aggregate_alignments:
    message: "Collecting alignments"
    input:
        alignments = _get_alignments
    output:
        alignment = f"{base_path}/alignment/{file_name}_aligned.fasta"
    shell:
        """
        cat {input.alignments} > {output.alignment}
        """